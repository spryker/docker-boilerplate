#!/bin/bash

set -e

REQUIRED_PROGS="docker docker-compose tr awk wc sed grep"
DEFAULT_APPLICATION_STORES="DE AT US"
DEFAULT_DATA_STORE="DS1"

[ -z "${SPRYKER_PHP_VERSION}" ] && export SPRYKER_PHP_VERSION=7.2
[ -z "${PROGRESS_TYPE}" ] && export PROGRESS_TYPE=tty
[ -z "${SPRYKER_DEMO_DATA_CHECK}" ] && export SPRYKER_DEMO_DATA_CHECK=0
[ -z "${SPRYKER_SSL_ENABLE}" ] && export SPRYKER_SSL_ENABLE=0
[ -z "${SPRYKER_XDEBUG_ENABLE}" ] && export SPRYKER_XDEBUG_ENABLE=0
[ -z "${SPRYKER_TESTING_ENABLE}" ] && export SPRYKER_TESTING_ENABLE=0
[ -z "${APPLICATION_ENV}" ] && export APPLICATION_ENV="docker"
[ -z "${APPLICATION_STORES}" ] && export APPLICATION_STORES=($(echo "${DEFAULT_APPLICATION_STORES}")) || export APPLICATION_STORES=($(echo "${APPLICATION_STORES}"))
[ -z "${APPLICATION_STORE}" ] && export APPLICATION_STORE=${APPLICATION_STORES[0]}
[ -z "${COMPOSE_PROJECT_NAME}" ] && export COMPOSE_PROJECT_NAME="spryker"
[ -z "${SPRYKER_LOG_DIRECTORY}" ] && export SPRYKER_LOG_DIRECTORY="/var/log/spryker"
[ -z "${SPRYKER_DOCKER_PREFIX}" ] && export SPRYKER_DOCKER_PREFIX=${COMPOSE_PROJECT_NAME}
[ -z "${SPRYKER_DOCKER_VERSION}" ] && export SPRYKER_DOCKER_VERSION="1.0"
[ -z "${SPRYKER_JOB_CONTAINER}" ] && export SPRYKER_JOB_CONTAINER="${SPRYKER_DOCKER_PREFIX}_zed_%store%_1"
[ -z "${VERBOSE}" ] && VERBOSE=0
export DOCKER_BUILDKIT=1

if [ -z "${PROJECT_ROOT}" ]; then
    PROJECT_ROOT=`pwd`
    while [[ ! -f ${PROJECT_ROOT}/composer.json ]]; do
    PROJECT_ROOT=`cd "${PROJECT_ROOT}/.."; pwd`
    if [[ "${PROJECT_ROOT}" == "/" ]]; then
        echo "ERR: File composer.json not found in current directory or its parents; can not determine ${PROJECT_ROOT}"
        exit 1
    fi
    done
fi
DOCKER_DIR="${PROJECT_ROOT}/docker"

[ -f ${DOCKER_DIR}/${APPLICATION_STORE}.env ] && source ${DOCKER_DIR}/${APPLICATION_STORE}.env
[ -f ${DOCKER_DIR}/${DEFAULT_DATA_STORE}.env ] && source ${DOCKER_DIR}/${DEFAULT_DATA_STORE}.env

export SPRYKER_DB_USERNAME=${SPRYKER_DB_USERNAME}
export SPRYKER_DB_PASSWORD=${SPRYKER_DB_PASSWORD}

SPRYKER_BASE_IMAGE_NAME=spryker/php:${SPRYKER_PHP_VERSION}
DOCKER_VERSION_SUPPORTED=18091
DOCKER_VERSION_INSTALLED=$(which docker > /dev/null; test $? -eq 0 && docker version --format '{{.Server.Version}}' | tr -d '.' || echo 0;)

COMPOSE_HTTP_TIMEOUT=400
DOCKER_COMPOSE_FILES="-f ${DOCKER_DIR}/docker-compose.yml"
DOCKER_EXTRA_OPTIONS=""
PFX_PASSWORD=${COMPOSE_PROJECT_NAME}

# Check if SPRYKER_DEVELOPMENT_ENABLE
[ -z "${SPRYKER_DEVELOPMENT_ENABLE}" ] && export SPRYKER_DEVELOPMENT_ENABLE=0

[ -z "${OS_LINUX}" ] && export OS_LINUX=0
[ -z "${OS_WINDOWS}" ] && export OS_WINDOWS=0

# Check if Xdebug is enabled
if [ ${SPRYKER_XDEBUG_ENABLE} -eq 1 ]; then
  DOCKER_COMPOSE_FILES+=" -f ${DOCKER_DIR}/docker-compose.xdebug.yml"
fi

if [ ${SPRYKER_SSL_ENABLE} -eq 1 ]; then
  DOCKER_COMPOSE_FILES+=" -f ${DOCKER_DIR}/docker-compose.ssl.yml"
fi

# Colors
if [ $(tput colors) -gt 0 ]; then
  RED="\033[1;31m"
  BLUE="\033[1;34m"
  CYAN="\033[1;36m"
  GREEN="\033[1;32m"
  YELLOW="\033[1;33m"
  BLUE="\033[1;34m"
  MAGENTA="\033[1;35m"
  WHITE="\033[1;37m"
  GR="\033[3m"
  NC="\033[0m"   # No Color

  INFO=${YELLOW}
  WARN=${RED}
  OK=${GREEN}
fi

export ifVerbose="[ \"${VERBOSE}\" == \"1\" ]"

function showHelp() {
  echo -e "\n${INFO}Usage:${NC}"
  echo -e " spryker <command> [options]"
  echo -e "\n${INFO}Possible commands are:${NC}"
  echo -e " ${GREEN}bootstrap${NC}\t\t  - Intialise docker setup for the project."
  echo -e " ${GREEN}build${NC}\t\t  - Build Spryker containers."
  echo -e " ${GREEN}clean${NC}\t\t  - Stop and removes all Spryker containers and volumes."
  echo -e " ${GREEN}cli${NC}\t\t  - Start a new container where you can run cli commands."
  echo -e " ${GREEN}cli${NC} <command>\t  - Run any cli command, e.g. \`${GR}./spryker cli composer install${NC}\`."
  echo -e " ${GREEN}console${NC} \t  - Run Spryker console command, e.g. \`${GR}./spryker console code:test -vvv -g Acceptance\`${NC}."
  echo -e " ${GREEN}codecept${NC}\t  - Start a new container where you can run Codeception commands in the test environment."
  echo -e " ${GREEN}code-checks${NC}\t  - Run code-checks."
  echo -e " ${GREEN}acceptance-tests${NC} - Run acceptance-tests, e.g. \`${GR}./spryker acceptance-tests -v -g Acceptance\`${NC} or  \`${GR}./spryker acceptance-tests -h\`${NC}."
  echo -e " ${GREEN}functional-tests${NC} - Run functional-tests, e.g. \`${GR}./spryker functional-tests -v\`${NC} or \`${GR}./spryker functional-tests -h\`${NC}."
  echo -e " ${GREEN}demo_data${NC}\t  - Populate Spryker demo data."
  echo -e " ${GREEN}down${NC}\t\t  - Stop all Spryker containers."
  echo -e " ${GREEN}jobs${NC}\t\t  - Generate and starts jobs."
  echo -e " ${GREEN}gen-certs${NC}\t  - Generate and starts jobs."
  echo -e " ${GREEN}help${NC}\t\t  - Show help page."
  echo -e " ${GREEN}pull${NC}\t\t  - Pull external docker images."
  echo -e " ${GREEN}reset${NC}\t\t  - Remove and build all Spryker containers and volumes."
  echo -e " ${GREEN}restart${NC}\t  - Restart Spryker containers."
  echo -e " ${GREEN}run${NC}\t\t  - Run Spryker containers."
  echo -e " ${GREEN}up${NC}\t\t  - Build and run Spryker apps based on demo data."

  echo -e "\n${INFO}Possible options are:${NC}"
  echo -e " ${GREEN}-d${NC}\t\t  - Enable dev mode. You can set environment variable SPRYKER_DEVELOPMENT_ENABLE=1 instead of using this option."
  echo -e " ${GREEN}-v${NC}\t\t  - Enable verbose mode. You can set environment variable VERBOSE=1 instead of using this option."
  echo -e " ${GREEN}-x${NC}\t\t  - Enable Xdebug. You can set environment variable SPRYKER_XDEBUG_ENABLE=1 instead of using this option."
  echo -e " ${GREEN}-t${NC}\t\t  - Enable testing mode."
}


function showExecHelp() {
  echo -e "${WARN}This is exec help${NC}"
  echo "Example: $0 exec -w db -w broker -w search -w scheduler -c \"ls -la; pwd; echo \\\${INTERNAL_VAR}\""
}

function enableDebugging() {
  echo -e "${WARN}DEBUGGING MODE${NC}"
  export SPRYKER_XDEBUG_HOST_IP=$(which ip >/dev/null 2>&1 && ifconfig $(ip r | grep default | awk '{print $5}') | grep "inet " | awk '{print $2}' || echo 'host.docker.internal')
  DOCKER_COMPOSE_FILES+=" -f ${DOCKER_DIR}/docker-compose.xdebug.yml"
  [ -f ${DOCKER_DIR}/context/php/conf.d/xdebug.custom.ini ] || touch ${DOCKER_DIR}/context/php/conf.d/xdebug.custom.ini
}

# Check if Xdebug is enabled
if [ ${SPRYKER_XDEBUG_ENABLE} -eq 1 ]; then
  enableDebugging
fi

# Checking that all required software is installed
function checkRequirements() {
  ${ifVerbose} && echo -e "${INFO}Checking requirements${NC}"
  for i in $(echo ${REQUIRED_PROGS}); do
    binPath=$(which ${i} || true)
    if [ -n "${binPath}" ]; then
      ${ifVerbose} && echo -e "${OK}${binPath} found${NC}"
      continue
    else
      echo -e "${WARN}'${i}' not found in \$PATH${NC}"
      exit 1
    fi
  done

  # Check installed docker version
  if [ "${DOCKER_VERSION_INSTALLED:-0}" -ge "${DOCKER_VERSION_SUPPORTED}" ]; then
    ${ifVerbose} && echo -e "${OK}Installed docker version ($DOCKER_VERSION_INSTALLED) is supported${NC}"
    :
  else
    echo -e "${WARN}Docker version is not supported, this tool requires at least docker 18.09${NC}"
    exit 1
  fi
}

function checkBootstrap() {
  if [ ! -f ${DOCKER_DIR}/sdk ]; then
    echo -e "${WARN}Docker setup was not bootstrapped!${NC}"
    echo -e "To initialize docker files for the project, please run: ${WHITE}docker/dist/sdk bootstrap${NC}"
    exit 1
  fi
}


function dataSync() {
  if [ ${SPRYKER_DEVELOPMENT_ENABLE} == 1 -a ${OS_LINUX} != 1 ]; then
  	export DOCKER_SYNC_SKIP_UPDATE=1
   	if [ $1 == "create" ]; then
  	  ${ifVerbose} && echo -e "${INFO}Creating 'data' volume${NC}"
   	  docker volume create --name=data-sync
   	fi
    if [ ${OS_WINDOWS} -eq 1 ]; then
      DOCKER_SYNC_CONF="/${PWD}/docker/docker-sync.win.yml"
    else
      DOCKER_SYNC_CONF="${DOCKER_DIR}/docker-sync.yml"
    fi
    if [ $1 == "clean" ]; then
      docker-sync clean -c ${DOCKER_SYNC_CONF}
    elif [ $1 == "stop" ]; then
      docker-sync stop -c ${DOCKER_SYNC_CONF} -n data-sync
    else
      if [ $(docker ps | grep 5000 | grep data-sync | wc -l |sed 's/^ *//') -eq 0 ]; then
        ${ifVerbose} && echo -e "${INFO}Start sync process for data volume${NC}"
        pushd ${PROJECT_ROOT}
        docker-sync start -c ${DOCKER_SYNC_CONF}
        popd
      fi
    fi
  fi
}


function checkAssets(){
  if [ ${SPRYKER_DEVELOPMENT_ENABLE} != 1 ]; then
    assetsHostFolder=$(docker volume ls --filter "name=${COMPOSE_PROJECT_NAME}_assets" --format "{{.Mountpoint}}")
  else
    if [ -d public/Yves/assets ]; then
      assetsHostFolder="public/Yves/assets"
    fi
  fi

  if [ -z "${assetsHostFolder}" ]; then
    echo 0
  else
    if [ -d ${assetsHostFolder} -a $(ls ${assetsHostFolder}|wc -l|sed 's/^ *//') -gt 0 ]; then
      echo 1
    else
      echo 0
    fi
  fi
}


function buildAssets() {
  ${ifVerbose} && echo -e "${INFO}Creating docker volume '${COMPOSE_PROJECT_NAME}_assets'${NC}"
  docker volume create --name="${COMPOSE_PROJECT_NAME}_assets"

  if [ ${SPRYKER_DEVELOPMENT_ENABLE} != 1 ]; then
    ${ifVerbose} && echo -e "${INFO}Running assets build${NC}"
    docker build -t ${SPRYKER_DOCKER_PREFIX}_builder_assets:${SPRYKER_DOCKER_VERSION} -f ${DOCKER_DIR}/builder_assets/Dockerfile ${PROJECT_ROOT} --progress=${PROGRESS_TYPE}

    ${ifVerbose} && echo -e "${WARN}Generating assets${NC}"
    docker run -i --rm -v ${COMPOSE_PROJECT_NAME}_assets:/assets --name=${SPRYKER_DOCKER_PREFIX}_builder_assets ${SPRYKER_DOCKER_PREFIX}_builder_assets:${SPRYKER_DOCKER_VERSION} true
  else
    dataSync start
    buildSprykerDev "vendor/bin/install -r docker -s build-static"
  fi
}


function buildApp() {
  ${ifVerbose} && echo -e "${INFO}Running build of dependency containers${NC}"
  execCompose build
}


function runApp() {
  [ ${SPRYKER_SSL_ENABLE} -eq 1 ] && generateSslCertificates
  detectDevelopmentMode
  ${ifVerbose} && echo -e "${INFO}Running Spryker App${NC}"
  execCompose up -d --remove-orphans
  dataSync start
}


function stopApp() {
  detectDevelopmentMode
  ${ifVerbose} && echo -e "${INFO}Stopping all containers${NC}"
  execCompose down  --remove-orphans
  dataSync stop
}


function buildSprykerDev(){
  docker run -i --rm \
    -e COMMAND="$1" \
    --env-file=${DOCKER_DIR}/.env \
    --restart=no \
    ${DOCKER_EXTRA_OPTIONS} \
    ${SPRYKER_DOCKER_PREFIX}_cli:${SPRYKER_DOCKER_VERSION} bash -s<<'EOF'
    bash -c "${COMMAND}"
EOF
}


function buildBaseImage() {
  ${ifVerbose} && echo -e "${INFO}Getting latest version of ${SPRYKER_BASE_IMAGE_NAME} image${NC}"
  [[ ${SPRYKER_DEVELOPMENT_ENABLE} == 1 ]] && docker pull ${SPRYKER_BASE_IMAGE_NAME}

  ${ifVerbose} && echo -e "${INFO}Building base_app image (based on base_platform)${NC}"
  docker build -t ${SPRYKER_DOCKER_PREFIX}_app:${SPRYKER_DOCKER_VERSION} \
    --progress=${PROGRESS_TYPE} \
    -f ${DOCKER_DIR}/${BASE_APP_FOLDER:-base_app}/Dockerfile \
    --build-arg SPRYKER_PHP_VERSION=${SPRYKER_PHP_VERSION} \
    --build-arg USER_UID=${USER_UID:-1000} \
    --build-arg USER_GID=${USER_GID:-1000} \
    --build-arg APPLICATION_ENV=${APPLICATION_ENV} \
    --build-arg SPRYKER_DB_ENGINE=${SPRYKER_DB_ENGINE} \
    --build-arg SPRYKER_LOG_DIRECTORY=${SPRYKER_LOG_DIRECTORY} \
    --label SPRYKER_DB_ENGINE=${SPRYKER_DB_ENGINE:-PGSQL} \
    --label BUILD_ENVIRONMENT=${BUILD_ENVIRONMENT:-demo} \
    ${PROJECT_ROOT}

  docker image tag ${SPRYKER_DOCKER_PREFIX}_app:${SPRYKER_DOCKER_VERSION} ${SPRYKER_DOCKER_PREFIX}_app:latest
  ${ifVerbose} && echo -e "${INFO}Building cli image (based on base_app)${NC}"
  docker build -t ${SPRYKER_DOCKER_PREFIX}_cli:${SPRYKER_DOCKER_VERSION} --build-arg SPRYKER_LOG_DIRECTORY=${SPRYKER_LOG_DIRECTORY} -f ${DOCKER_DIR}/cli/Dockerfile ${PROJECT_ROOT} --progress=${PROGRESS_TYPE}
  dataSync create
  buildBaseImageDev
}


function buildBaseImageDev() {
  if [ ${SPRYKER_DEVELOPMENT_ENABLE} == 1 ]; then
    vendorDir=$(buildSprykerDev '[ ! -d /data/vendor ] && echo 0 || echo 1'|tail -n 1)
    if [ "${vendorDir}" == "0" ]; then
      ${ifVerbose} && echo -e "${INFO}Running composer install${NC}"
      buildSprykerDev 'composer install --no-interaction --optimize-autoloader'
    fi
    generatedDir=$(buildSprykerDev '[ ! -d src/Generated ] && echo 0 || echo 1'|tail -n 1)
    if [ "${generatedDir}" == "0" ]; then
      ${ifVerbose} && echo -e "${INFO}Running build${NC}"
      buildSprykerDev 'vendor/bin/install -r docker -s build -s build-development'
    fi
    varsFile=$(buildSprykerDev '[ ! -f deploy/vars ] && echo 0 || echo 1'|tail -n 1)
    if [ "${varsFile}" == "0" ]; then
      ${ifVerbose} && echo -e "${INFO}Update scheduler variables${NC}"
      buildSprykerDev "mkdir -p /data/deploy ; \
      echo \"PHP_BIN=/usr/bin/php\" > /data/deploy/vars ; \
      echo \"destination_release_dir=/data\" >> /data/deploy/vars ; \
      echo \"cd /data\" >> /data/deploy/vars ; \
      ln -s /data '/data/\$destination_release_dir'"
    fi
  fi
}


enableDevelopmentMode() {
  if [ ${SPRYKER_DEVELOPMENT_ENABLE} -eq 1 ]; then
    CURRENT_DIR=$(pwd)
    BASE_APP_FOLDER=base_dev
    checkDockerSync
    setDevelopmentExtraOptions
  fi
}


function enableTestingMode() {
  if [ ${SPRYKER_TESTING_ENABLE} -eq 1 ]; then
      ${ifVerbose} && echo -e "${WARN}Testing MODE${NC}"
      #export SPRYKER_BE_HOST=${SPRYKER_BE_HOST}
      #export SPRYKER_FE_HOST=${SPRYKER_FE_HOST}
      DOCKER_COMPOSE_VARS+="SPRYKER_BE_HOST=${SPRYKER_BE_HOST} SPRYKER_FE_HOST=${SPRYKER_FE_HOST}"
      DOCKER_COMPOSE_FILES+=" -f ${DOCKER_DIR}/docker-compose.test.yml"
      DOCKER_EXTRA_OPTIONS+=" --env-file=${DOCKER_DIR}/test.env -u spryker:spryker"
  fi
}

function checkDemoData() {
  WAIT_FOR_DB_SERVICE=1
  VERBOSE_EXEC=0
  execSpryker "echo 'All ok'" > /dev/null 2>&1
  if [ "${SPRYKER_DB_ENGINE}" == "MYSQL" ]; then
    tablesCount=$(execSpryker 'export VERBOSE=0; mysql -h ${SPRYKER_DB_HOST} -u ${SPRYKER_DB_USERNAME} -p${SPRYKER_DB_PASSWORD} -e "SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = '\''${SPRYKER_DB_DATABASE}'\''"'|wc -l| sed 's/^ *//')
  else
    if [ "$(execSpryker "export VERBOSE=0; export PGPASSWORD=\${SPRYKER_DB_PASSWORD}; psql -lqt -h \${SPRYKER_DB_HOST} -U \${SPRYKER_DB_USERNAME} | grep \${SPRYKER_DB_DATABASE}"|wc -l| sed 's/^ *//')" -eq 1 ]; then
      tablesCount=$(execSpryker "export VERBOSE=0; export PGPASSWORD=\${SPRYKER_DB_PASSWORD}; psql -h \${SPRYKER_DB_HOST} -U \${SPRYKER_DB_USERNAME} \${SPRYKER_DB_DATABASE} -c \"SELECT count(*) FROM information_schema.tables WHERE table_schema NOT IN ('information_schema', 'pg_catalog');\" -t 2>&1 |sed -e 's/^[[:space:]]*//'")
    else
      tablesCount=0
    fi
  fi
  echo ${tablesCount}
}



function checkSchedulerJobs() {
  WAIT_FOR_SCHEDULER=1
  execSpryker 'curl -sL ${SPRYKER_SCHEDULER_HOST}:${SPRYKER_SCHEDULER_PORT}/scriptText -d "script=println Jenkins.instance.projects.collect{ it.name }.size"'|tail -n 1
}


function createSchedulerJobs() {
  detectDevelopmentMode
  ${ifVerbose} && echo -e "${INFO}Running import of builder jobs${NC}"
  WAIT_FOR_SCHEDULER=1
  execSpryker "vendor/bin/install -r docker -s build-jobs"
}

function destroyAppAndVolumes() {
  detectDevelopmentMode
  ${ifVerbose} && echo -e "${INFO}Stopping and removing all Spryker containers and volumes${NC}"
  execCompose down -v --remove-orphans
  dataSync clean
}

function destroyAppVolumesAndImages() {
  detectDevelopmentMode
  ${ifVerbose} && echo -e "${INFO}Stopping and removing all Spryker containers and volumes${NC}"
  execCompose down -v --remove-orphans --rmi all
  dataSync clean
}


function loadDemoData() {
  detectDevelopmentMode
  runApp

  WAIT_FOR_BROKER=1
  WAIT_FOR_SEARCH=1
  WAIT_FOR_DB_SERVICE=1
  WAIT_FOR_KEY_VALUE_STORE=1
  dataSync start
  for APPLICATION_STORE in ${APPLICATION_STORES[@]}; do
    export APPLICATION_STORE=${APPLICATION_STORE}
    if [ ${SPRYKER_DEMO_DATA_CHECK} -eq 1 ]; then
      if [ "$(checkDemoData)" -eq 0 ]; then
        echo -e "${INFO}Loading demo data for ${APPLICATION_STORE} store.${NC}"
        execSpryker 'vendor/bin/install -r docker -s init-storages -s demodata'
      fi
    else
      echo -e "${INFO}Loading demo data for ${APPLICATION_STORE} store.${NC}"
      execSpryker 'vendor/bin/install -r docker -s init-storages -s demodata'
    fi
  done
}


function destroyAssets() {
  ${ifVerbose} && echo -e "${INFO}Removing assets volume${NC}"
  docker volume rm -f ${COMPOSE_PROJECT_NAME}_assets
}


function destroyImages() {
  ${ifVerbose} && echo -e "${INFO}Removing all Spryker images${NC}"
  if [ $(docker images --filter "reference=spryker_*:${SPRYKER_DOCKER_VERSION}" --format "{{.ID}}" | wc -l | sed 's/^ *//') -gt 1 ]; then
    docker images --filter "reference=spryker_*:${SPRYKER_DOCKER_VERSION}" --format "{{.ID}}" | xargs docker rmi -f
  fi
  ${ifVerbose} && echo -e "${INFO}Removing base image${NC}"
  docker rmi -f ${SPRYKER_BASE_IMAGE_NAME}
}


function setExtraEnvFiles () {
  APPLICATION_STORE_LOWERCASE=$(echo ${APPLICATION_STORE} |tr '[:upper:]' '[:lower:]')
  DATASTORE=$(docker inspect --format='{{ range .Config.Env}}{{if eq (index (split . "=") 0) "SPRYKER_DATASTORE" }}{{print (index ( split . "=" ) 1 ) }}{{end}}{{end}}' $(docker ps --filter "name=${SPRYKER_DOCKER_PREFIX}_zed_*${APPLICATION_STORE_LOWERCASE}_" -q))
  export DOCKER_EXTRA_ENV_FILES="--env-file=${DOCKER_DIR}/${APPLICATION_STORE}.env --env-file=${DOCKER_DIR}/${DATASTORE}.env"
}


function execSpryker() {
  setExtraEnvFiles
  docker run -i --rm \
    -e WAIT_FOR_DB="${WAIT_FOR_DB}" \
    -e WAIT_FOR_DB_SERVICE="${WAIT_FOR_DB_SERVICE}" \
    -e WAIT_FOR_BROKER="${WAIT_FOR_BROKER}" \
    -e WAIT_FOR_SEARCH="${WAIT_FOR_SEARCH}" \
    -e WAIT_FOR_SCHEDULER="${WAIT_FOR_SCHEDULER}" \
    -e WAIT_FOR_KEY_VALUE_STORE="${WAIT_FOR_KEY_VALUE_STORE}" \
    -e SPRYKER_JOB_CONTAINER="${SPRYKER_JOB_CONTAINER}" \
    -e COMMAND="${1}" \
    -e VERBOSE_EXEC=${VERBOSE_EXEC:-${VERBOSE:-0}} \
    --network=${SPRYKER_DOCKER_PREFIX}_services \
    --env-file=${DOCKER_DIR}/.env \
    --restart=no \
    ${DOCKER_EXTRA_ENV_FILES} \
    ${DOCKER_EXTRA_OPTIONS} \
    ${SPRYKER_DOCKER_PREFIX}_cli:${SPRYKER_DOCKER_VERSION} bash -s<<'EOF'
    export ifVerbose="[ \"${VERBOSE_EXEC}\" != \"0\" ]"
    if [ -n "${WAIT_FOR_DB_SERVICE}" ]; then
        if [ ${SPRYKER_DB_ENGINE} == "MYSQL" ]; then
          until [ "${dbCli}" == "information_schema" ]; do
            dbCli=$(mysql -h ${SPRYKER_DB_HOST} -u root -p${SPRYKER_DB_PASSWORD}  --skip-column-names -e "SHOW DATABASES LIKE 'information_schema'")
            ${ifVerbose} && echo "Waiting for mysql database service..."
            sleep 3
          done
          dbUserCheck=$(mysql -h ${SPRYKER_DB_HOST} -u root -p${SPRYKER_DB_PASSWORD}  --skip-column-names -e "SELECT COUNT(*) FROM mysql.user WHERE user = '${SPRYKER_DB_USERNAME}';")
          if [ "${dbUserCheck}" -eq "0" ]; then
            mysql -h ${SPRYKER_DB_HOST} -u root -p${SPRYKER_DB_PASSWORD} -e "GRANT ALL PRIVILEGES ON *.* TO '${SPRYKER_DB_USER}'@'%' IDENTIFIED BY '${SPRYKER_DB_PASSWORD}'; FLUSH PRIVILEGES; "
            ${ifVerbose} && echo "Create a mysql user"
          fi
        else
          until [ "${dbCli}" == "postgres" ]; do
            export PGPASSWORD=${SPRYKER_DB_PASSWORD}
            dbCli=$(psql -h ${SPRYKER_DB_HOST} -p "${SPRYKER_DB_PORT}" -U "${SPRYKER_DB_USERNAME}" postgres -c '\l' | grep postgres | awk '{print $1}')
            ${ifVerbose} && echo "Waiting for postgres database service..."
            sleep 3
          done
        fi
      ${ifVerbose} && echo "Database service is available now. Good."
    fi

    if [ -n "${WAIT_FOR_DB}" ]; then
      until [ "${dbCli}" == "${SPRYKER_DB_DATABASE}" ]; do
        if [ ${SPRYKER_DB_ENGINE} == "MYSQL" ]; then
          dbCli=$(mysql -h ${SPRYKER_DB_HOST} -u ${SPRYKER_DB_USERNAME} -p${SPRYKER_DB_PASSWORD}  --skip-column-names -e "SHOW DATABASES LIKE '${SPRYKER_DB_DATABASE}'")
        else
          export PGPASSWORD=${SPRYKER_DB_PASSWORD}
          dbCli=$(psql -h ${SPRYKER_DB_HOST} -p "${SPRYKER_DB_PORT}" -U "${SPRYKER_DB_USERNAME}" ${SPRYKER_DB_DATABASE} -c '\l' | grep ${SPRYKER_DB_DATABASE} | awk '{print $1}')
        fi
      # Waiting for database starting
        ${ifVerbose} && echo "Waiting for database..."
        sleep 3
      done
      ${ifVerbose} && echo "Database is available now. Good."
    fi

    if [ -n "${WAIT_FOR_SEARCH}" ]; then
      # Waiting for the Search service starting
      until curl -s "${SPRYKER_SEARCH_HOST}:${SPRYKER_SEARCH_PORT}" > /dev/null; do
        ${ifVerbose} && echo "Waiting for Search service..."
        sleep 3
      done
      ${ifVerbose} && echo "Search service is available now. Good."
    fi

    if [ -n "${WAIT_FOR_BROKER}" ]; then
      # Waiting for the Broker starting
      until curl -s "${SPRYKER_BROKER_HOST}:${SPRYKER_BROKER_API_PORT}" > /dev/null; do
        ${ifVerbose} && echo "Waiting for Broker..."
        sleep 3
      done
      ${ifVerbose} && echo "Broker is available now. Good."
    fi

    if [ -n "${WAIT_FOR_SCHEDULER}" ]; then
      # Waiting for Scheduler
      until [ $(curl ${SPRYKER_SCHEDULER_HOST}:${SPRYKER_SCHEDULER_PORT} -sL -o /dev/null   -w "%{http_code}\n") -eq 200 ]; do
        ${ifVerbose} && echo "Waiting for Scheduler..."
        sleep 3
      done
      ${ifVerbose} && echo "Scheduler is available now. Good."
    fi

    if [ -n "${WAIT_FOR_KEY_VALUE_STORE}" ]; then
      # Waiting for the Key-value store starting
      until [ "${responce}" == "+PONG" ]; do
        ${ifVerbose} && echo "Waiting for Key-value store..."
        sleep 3
        responce=$((printf "PING\r\n";sleep 1) | nc -q 1 ${SPRYKER_KEY_VALUE_STORE_HOST} 6379 | sed 's/\r//')
      done
      ${ifVerbose} && echo "Key-value store is available now. Good."
    fi

    bash -c "${COMMAND}"
EOF
}

function setDevelopmentExtraOptions() {
  BUILD_ENVIRONMENT=dev
  if [ "$(uname)" == "Linux" -a "$(uname -a | grep -v Microsoft | wc -l |sed 's/^ *//')" -eq 1 ] ; then
    USER_UID=$(id -u)
    USER_GID=$(id -g)
    VOLUME_ARG=$(pwd)
    DOCKER_COMPOSE_FILES+=" -f ${DOCKER_DIR}/docker-compose.dev.yml"
    OS_LINUX=1
    DOCKER_EXTRA_OPTIONS+=" -v ${VOLUME_ARG}:/data -u ${USER_UID}:${USER_GID} --env-file=${DOCKER_DIR}/dev.env"
  elif [ "$(uname)" == "Darwin" ]; then
    USER_UID="1000"
    USER_GID="1000"
    VOLUME_ARG=data-sync
    DOCKER_COMPOSE_FILES+=" -f ${DOCKER_DIR}/docker-compose.mac.dev.yml"
    OS_LINUX=0
    DOCKER_EXTRA_OPTIONS+=" -v ${VOLUME_ARG}:/data -u ${USER_UID}:${USER_GID} --env-file=${DOCKER_DIR}/dev.env"
  else
    USER_UID="1000"
    USER_GID="1000"
    VOLUME_ARG=data-sync
    DOCKER_COMPOSE_FILES+=" -f ${DOCKER_DIR}/docker-compose.win.dev.yml"
    OS_WINDOWS=1
    export COMPOSE_CONVERT_WINDOWS_PATHS=1
    DOCKER_EXTRA_OPTIONS+=" -v ${VOLUME_ARG}:/data -u ${USER_UID}:${USER_GID} --env-file=${DOCKER_DIR}/dev.env"
  fi

}

function checkDockerSync() {
  if [ "$(uname)" == "Darwin" ] ; then
    REQUIRED_PROGS="docker-sync"
    checkRequirements
  fi
}

function doBuild(){
  buildBaseImage
  buildApp
  # If assets is not built yet, then build it
  if [ "$(checkAssets)" -eq 0 ]; then
    buildAssets
  fi
}

function execCompose() {
  ${ifVerbose} && echo -e "${INFO}docker-compose --project-directory ${PROJECT_ROOT} -p ${SPRYKER_DOCKER_PREFIX} ${DOCKER_COMPOSE_FILES} $* ${NC}"
  env \
    $(cat ${DOCKER_DIR}/.env | xargs) \
    $(echo $DOCKER_COMPOSE_VARS) \
    SPRYKER_DB_USERNAME=${SPRYKER_DB_USERNAME} \
    SPRYKER_DB_PASSWORD=${SPRYKER_DB_PASSWORD} \
    docker-compose \
    --project-directory ${PROJECT_ROOT} \
    --project-name ${SPRYKER_DOCKER_PREFIX} \
    ${DOCKER_COMPOSE_FILES} \
    $*
}

function doPull() {
  execCompose pull --ignore-pull-failures 2> /dev/null
}

function doUp() {
  doBuild

  runApp

  #Load demo data for all stores if the database of the default store is empty
  [ "$(checkDemoData)" -eq 0 ] && export SPRYKER_DEMO_DATA_CHECK=0

  loadDemoData

  if [ "$(checkSchedulerJobs)" -eq 0 ]; then
    echo -e "${INFO}Creating Scheduler jobs${NC}"
    createSchedulerJobs
  fi
}

function doCli() {
  binFile=$1
  binFileArgument=${@:2}

  [ -z "${DOCKER_EXTRA_OPTIONS}" ] && export DOCKER_EXTRA_OPTIONS="-u ${USER_UID:-1000}"

  if [ -z ${binFile} ]; then
    setExtraEnvFiles
    docker create -it --rm \
      --network=${SPRYKER_DOCKER_PREFIX}_services \
      --env-file=${DOCKER_DIR}/.env \
      --restart=no \
      -e PS1=${PS1:-"spryker-${APPLICATION_STORE}-cli@\u\$ "} \
      -e SPRYKER_JOB_CONTAINER="${SPRYKER_JOB_CONTAINER}" \
      --name ${SPRYKER_DOCKER_PREFIX}_cli \
      ${DOCKER_EXTRA_ENV_FILES} \
      ${DOCKER_EXTRA_OPTIONS} \
      ${SPRYKER_DOCKER_PREFIX}_cli:${SPRYKER_DOCKER_VERSION} bash
      docker network connect ${SPRYKER_DOCKER_PREFIX}_public  ${SPRYKER_DOCKER_PREFIX}_cli
      docker network connect ${SPRYKER_DOCKER_PREFIX}_private  ${SPRYKER_DOCKER_PREFIX}_cli
      docker start -ai  ${SPRYKER_DOCKER_PREFIX}_cli
  else
      COMMAND="${binFile} ${binFileArgument}"
      execSpryker "${COMMAND}"
  fi
}

function doBootstrap() {
  DIST_DIR="${DOCKER_DIR}/dist"
  LOCAL_DIR="${DOCKER_DIR}/local"
  DEST_DIR="${DOCKER_DIR}"
  echo -e "${INFO}Boostrapping docker setup...${NC}"

  echo -e "${WHITE}Copying files from ${DIST_DIR} to ${DEST_DIR}${NC}"
  rsync \
    --out-format="%n" \
    -ra \
    --exclude '.git' \
    --exclude '.git*' \
    ${DIST_DIR}/ ${DEST_DIR}/

  echo -e "${WHITE}Copying project override files from ${LOCAL_DIR} to ${DEST_DIR}${NC}"
  [ -d ${LOCAL_DIR} ] && rsync \
    --out-format="%n" \
    -ra \
    --exclude '.git' \
    --exclude '.git*' \
    ${LOCAL_DIR}/ ${DEST_DIR}/

  echo -e "${WHITE}Moving .dockerignore to project root${NC}"
  mv "${DOCKER_DIR}/.dockerignore" "${PROJECT_ROOT}"

  echo -e "OK, finished."
  echo -e "Your local working copy of Spryker Docker SDK has been generated in ${DOCKER_DIR}"
  echo -e "Please do not modify generated files. If you would like to override any file on project level,"
  echo -e "create a file in ${WHITE}docker/local${NC} instead. Please check the documentation for more details."
  echo -e "From now, to call Spryker docker SDK CLI, use the command:"
  echo -e "${WHITE}docker/sdk${NC}"
}

function detectDevelopmentMode() {
  if [ "${DOCKER_COMPOSE_FILES}" == "${DOCKER_COMPOSE_FILES/dev/}" ]; then
    if [ ${SPRYKER_DEVELOPMENT_ENABLE} -eq 1 ]; then
      export BUILD_ENVIRONMENT=dev
    elif [ "$(checkImageLabels BUILD_ENVIRONMENT dev)" == "1" ]; then
      export SPRYKER_DEVELOPMENT_ENABLE=1
      BUILD_ENVIRONMENT=dev
    fi
    enableDevelopmentMode
  fi
}

function detectDatabaseEngine() {
  if [ "${DOCKER_COMPOSE_FILES}" == "${DOCKER_COMPOSE_FILES/mysql/}" ]; then
    if [ "${SPRYKER_DB_ENGINE}" == "MYSQL" -o  "$(checkImageLabels SPRYKER_DB_ENGINE MYSQL)" == "1" ]; then
      DOCKER_COMPOSE_FILES+=" -f ${DOCKER_DIR}/docker-compose.mysql.yml"
      DOCKER_EXTRA_OPTIONS+=" --env-file=${DOCKER_DIR}/mysql.env"
      export SPRYKER_DB_ENGINE="MYSQL"
    else
      export SPRYKER_DB_ENGINE="PGSQL"
    fi
  fi
}

function checkImageLabels() {
  imageLabel=$1
  labelValue=$2

  if [ ! -z $(docker images -q ${SPRYKER_DOCKER_PREFIX}_app:${SPRYKER_DOCKER_VERSION}) ]; then
    if [ "$(docker image inspect --format "{{ index .Config.Labels \"${imageLabel}\"}}" ${SPRYKER_DOCKER_PREFIX}_app:${SPRYKER_DOCKER_VERSION})" == "${labelValue}" ]; then
      echo 1
    fi
  fi
}

function generateSslCertificates() {
  CERTS_DIR=${DOCKER_DIR}/context/certs
  SSL_APPLICATION_STORES=($(echo ${APPLICATION_STORES[@]}))
  SSL_APPLICATION_STORES+=('services')

  for SSL_APPLICATION_STORE in ${SSL_APPLICATION_STORES[@]}; do
    # Generating Self-Signed certs for each store
    docker run -i \
      --rm \
      -v ${PWD}/docker/context/openssl:/opt/openssl \
      -v ${CERTS_DIR}:/certs:rw \
      -e PFX_PASSWORD=${PFX_PASSWORD} \
      -e SPRYKER_DOCKER_PREFIX=${SPRYKER_DOCKER_PREFIX} \
      -e WARN=${WARN} \
      -e CYAN=${CYAN} \
      -e INFO=${INFO} \
      -e NC=${NC} \
      --env-file=${DOCKER_DIR}/.env \
      --env-file=${DOCKER_DIR}/${SSL_APPLICATION_STORE}.env \
      ${SPRYKER_DOCKER_PREFIX}_cli:${SPRYKER_DOCKER_VERSION} bash /opt/openssl/generate_certs.sh
  done
  unset SSL_APPLICATION_STORES
  echo -e "${WARN}Please follow the instruction on how to add CA cert into your system to avoid a warning message in the web browser:${NC}"
  echo -e "  ${WARN}http://documentation.spryker.com/....certificates-enable.html${NC}"
}

enableDevelopmentMode
enableTestingMode
detectDatabaseEngine

if [ "$1" != "exec" -a "$1" != "shell" ] ; then
  # Starting accept arguments after $1
  OPTIND=2
  while getopts ":xdvt" opt; do
    case ${opt} in
    # d - dev
    d)
      SPRYKER_DEVELOPMENT_ENABLE=1
      enableDevelopmentMode
      ;;
    # x - debug, xdebug
    x)
      enableDebugging
      ;;
    t)
      SPRYKER_TESTING_ENABLE=1
      enableTestingMode
      ;;
    v)
      echo "verbose is enabled"
      VERBOSE=1
      export ifVerbose="[ \"${VERBOSE}\" == \"1\" ]"
      ;;
    # Unknown argument specified
    [?])
      # "Unknown arguments skip silently"
      ;;

    # Specified argument without required value
    :)
      echo "Option ${opt} requires an argument"
      exit 1
      ;;
    esac
  done
fi

checkRequirements
[ "$1" != "bootstrap" ] && checkBootstrap


case $1 in
  bootstrap)
    doBootstrap
    ;;
  build)
    doBuild
    ;;
  run|start)
    runApp
    ;;
  up|all)
    export SPRYKER_DEMO_DATA_CHECK=1
    doUp
    ;;
  demo|demo_data|demo-data)
    loadDemoData
    ;;
  down|stop)
    stopApp
    ;;
  restart)
    stopApp
    runApp
    ;;
  pull)
    doPull
    ;;
  jobs)
    createSchedulerJobs
    ;;
  reset)
    stopApp
    destroyAppAndVolumes
    destroyAssets
    doUp
    ;;
  destroy|remove|clean)
    destroyAppVolumesAndImages
    destroyAssets
    destroyImages
    ;;
  exec|shell)
    OPTIND=2
    while getopts "w:c:" opt; do
      case ${opt} in
        # w - wait for ...
        w)
          case ${OPTARG} in
            db|database)
              ${ifVerbose} && echo -e "${INFO}Checking if Database is available${NC}"
              WAIT_FOR_DB=1
              ;;
            queue|broker)
              ${ifVerbose} && echo -e "${INFO}Checking if Broker is available${NC}"
              WAIT_FOR_BROKER=1
              ;;
            search)
              ${ifVerbose} && echo -e "${INFO}Checking if Search service is available${NC}"
              WAIT_FOR_SEARCH=1
              ;;
            scheduler|jobs)
              WAIT_FOR_SCHEDULER=1
              ;;
            key_value_store)
              ${ifVerbose} && echo -e "${INFO}Checking if Key-value store is available${NC}"
              WAIT_FOR_KEY_VALUE_STORE=1
              ;;
            all)
              ${ifVerbose} && echo -e "${INFO}Checking if Database, Search service and Broker are available${NC}"
              WAIT_FOR_DB=1
              WAIT_FOR_BROKER=1
              WAIT_FOR_SEARCH=1
              WAIT_FOR_KEY_VALUE_STORE=1
              ;;
            *)
              echo "Wrong argument for 'spryker exec'"
              showExecHelp
              exit 1
              ;;
          esac
          ;;
        c)
          echo "Executing: ${OPTARG}"
          export COMMAND="${OPTARG}"
          ;;
      # Unknown argument specified
        [?])
          # "Unknown arguments skip silently"
          ;;
      esac
    done
    detectDevelopmentMode
    execSpryker "${COMMAND}"
    ;;
  cli)
    detectDevelopmentMode
    doCli $2 ${@:3}
    exit 0
    ;;
  codecept)
    detectDevelopmentMode
    PS1="spryker-codecept@\u\$ "
    DOCKER_EXTRA_OPTIONS+=" --env-file=${DOCKER_DIR}/test.env"
    doCli $2 ${@:3}
    ;;
  code-checks)
    detectDevelopmentMode
    DOCKER_EXTRA_OPTIONS+=" --env-file=${DOCKER_DIR}/test.env"
    doCli console code:validation ${@:2}
    ;;
  functional-tests)
    detectDevelopmentMode
    DOCKER_EXTRA_OPTIONS+=" --env-file=${DOCKER_DIR}/test.env"
    doCli console code:test:functional ${@:2}
    ;;
  acceptance-tests)
    detectDevelopmentMode
    DOCKER_EXTRA_OPTIONS+=" --env-file=${DOCKER_DIR}/test.env"
    doCli console code:test:acceptance ${@:2}
    ;;
  console)
    detectDevelopmentMode
    doCli console ${@:2}
    ;;
  generate-ssl-certificates|gen-ssl|gen_ssl|gen_certs|gen-certs)
    generateSslCertificates
    ;;
  *)
    showHelp
    exit 1
    ;;
esac
